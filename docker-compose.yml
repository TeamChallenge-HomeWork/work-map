services:
  auth-postgres:
    image: postgres
    container_name: auth-postgres
    env_file:
      - ./backend/auth/Auth.GRPC/.env
    ports:
      - "5432:5432"
    networks:
      - auth
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 3s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  auth-redis:
    image: redis:latest
    container_name: auth-redis
    env_file:
      - ./backend/auth/Auth.GRPC/.env
    environment:
      - REDIS_PASSWORD
    ports:
      - "6379:6379"
    networks:
      - auth
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  auth:
    container_name: auth
    build:
      context: .
      dockerfile: ./backend/auth/Auth.GRPC/Dockerfile
    env_file:
      - ./backend/auth/Auth.GRPC/.env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      auth-postgres:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
    ports:
      - "50051:8080"
    networks:
      - auth
      - work-map
    restart: unless-stopped

  gateway:
    container_name: gateway
    build:
      context: ./backend/gateway/
      dockerfile: Dockerfile
    ports:
      - "4001:4001"
    networks:
      - gateway
      - work-map

  gateway-redis:
    container_name: gateway-redis
    image: redis:alpine
    ports:
      - "6377:6379"
    env_file:
      - ./backend/gateway/.env
    entrypoint: [ "sh", "-c", "redis-server --requirepass $${REDIS_PASSWORD}" ]
    networks:
      - gateway

networks:
  gateway:
    driver: bridge
  auth:
    driver: bridge
  work-map:
    driver: bridge
